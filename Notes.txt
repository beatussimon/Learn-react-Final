Lecture 65 and beyond

In case of useState() hook you have a state and a setState hook to change the value of the state
useReducer:

In case of reducer we have a state and a reducer function and an action which we dispatch 
syntax: const[state, dispatch] = useReducer(reducerFunc, initial_value)

function reducer(state, action){

}

Whenever you want yo make changes to the state, changes should be made inside the reducer function
In useReducer we dispatch an action object which includes the type of action as well as the payload

Then, we have a reducer function which actually modifies the value of the existing state that we have considering the action that we have

Using complex objects as state in reducer hook:

React apps are client side rendered, The server does not send the new page back

React router allows us to have multiple pages in a single page 
Create pages folder and inside the paages folder there is a place where all our react pages will reside

The pages you create are not going to be html files but react components


Nested routes=> Routes inside routes

We neew a way to render the nested routes if you just render them without giving them an outlet they wont be displayed do add outlet self closing tag to the parent router so that they are rendered inside the router

Programmatic navigation in react:
For example when an event happens you want to redirect the user to a different page
For instance you have a button and when it is clicked you want to direct the user to the new tab
Just like we have useState or useReducer we also have a use Navigate hook

A navigate function allows us to alseo pass in a state as well
For example when you click on a button it should transfer with it a state into to the newly navigatted page

CONTEXT API:
we have data and funtion which manipulate that data 
In react we have been passing the data and functions through different components even if the components do not require those two things
This phenomena of passing data and functions throug comonents through props is called PROP DRILLING
we neewd to avoid PROP DRILLING  since the componets which actually do not need the data and functions still has to go and 
 accept them 

 And the solutioon to this PROP DRILLING problem and that is is to go and create context 

 Incase of contex what we do is we create data and and functions in one of the componets and we pass them to to the context and Whenever
 some other componentactually require data and functionswe dont have to pass them from one component to the other 
 and instead we could access that particular context anywhere in anykind of component we have for example if you have component a,b,c then if the context is in a the context can be accessed with other component

 Context is something that allows data and functionaccess from one component to the other without haveing to pass them 
 to the components which requore them

 The reson we use context is to avoid the problom of prop drilling

 Steps involved with the context:
    Creating context
        CREATE A CONTEXT OBJECT THAT YOU CAN PASS TO DIFFERENT component
    Providing context
        PROVIDE THAT CONTEXT TO THE OTHER COMPONENTS THAT REQUORES THEM
        Means once you have crated the context that has data and functions you go and pass them to any component you have
        Remember exporting your context created so it is accesibke to other components
    Consuming context
        MAKE A COMPONENT CONSUME THAT CONTEXT MEANING GO AND USE THE data AND function THA ARE PROVIDED BY context
    Updating context
        CONTEXT IS NOTHING MORE THAN JUST data AND functions THAT A PARTICULAR COMPONENT CONSUMES, THE FINAL STAGE IS TAKING
         THE DATA THAT WAS IN THE CONTEXT AND UPDATING IT